<template>
	<view>
		<swiper :style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; background-color: #000000;'" :vertical="true" @animationfinish="animationfinish" @change="change" :current="current" :indicator-dots="false" @touchstart="mpTouchstart" @touchend="mpTouchend">
			<swiper-item v-for="(list,index) in dataList" :key="index">
				<view v-if="isChange">
					<view>
						<!-- 
						1.v-if：用于控制视频在节点的渲染数
						2.muted的默认值是 false，代表默认是禁音视频的
						3.http-cache默认开启视频缓存
						4.poster（封面（方案一））：这里的封面默认处理存储在阿里云的视频
						5.show-loading：这里默认去掉播放转圈的标志
						
						 -->
						 <video
						 v-if="isShow"
						 :id="list._id+'_'+index"
						 :loop="true"
						 :muted="list.isplay"
						 :controls="false"
						 :http-cache="true"
						 :page-gesture="false"
						 :show-fullscreen-btn="false"
						 :show-loading="false"
						 :show-center-play-btn="false"
						 :enable-progress-gesture="false"
						 :src="list.src"
						 @ended="ended"
						 @click="tapVideoHover(list.state,$event)"
						 :style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; background-color: #000000;'"
						 :poster="list.img"
						 ></video>
						<!-- 
						1.这里是封面（方案二）：这里的封面可以自定义。
						2.也在代码中做了批注，两种方案可以共存，不会相互影响。
						-->
						<image
						v-if="!list.playIng"
						:src="list.img"
						:style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; position: absolute;'"
						mode="aspectFit"
						></image>
					</view>
					<!-- 播放状态：pause 的时候就会暂停 -->
					<view class="videoHover" @click="tapVideoHover(list.state,$event)" :style="'width: '+ windowWidth +'px; height: '+ cccHeight +'px;'">
						<image v-if="list.state=='pause'" class="playState" src="@/static/play.png"></image>
					</view>
					<view class="userInfo">
						<!-- 1.头像 -->
						<!-- <image @click="tozuozhe" class="userAvatar" :src="list.href" mode="aspectFill"></image> -->
						<!-- 2.点赞 -->
						<view @click="cLike(list.like);" style="opacity: 0.9; margin-top: 17px;">
							<image v-if="list.like" src="@/static/aixin.png" style="width: 40px; height: 40px; position: absolute; right: 6px;"></image>
							<image v-if="!list.like" src="@/static/aixinRed.png" style="width: 40px; height: 40px; position: absolute; right: 6px;"></image>
							<text style="color: #FFFFFF; margin-top: 5px; font-size: 14px; text-align: center; margin-top: 40px; font-weight: bold;" :class="{'likeNumActive':list.like}">{{list.like_n}}</text>
						</view>
						<!-- 3.评论 -->
						<view class="comment" @click="toComment(index)" style="opacity: 0.9; margin-top: 17px;">
							<image src="" style="width: 35px; height: 35px; position: absolute; right: 7px;"></image>
							<text style="color: #FFFFFF; margin-top: 5px; font-size: 14px; font-weight: bold; text-align: center; margin-top: 40px;">{{list.sms_n}}</text>
						</view>
						<!-- 4.分享 -->
						<view @click="share" style="opacity: 0.9; margin-top: 17px;">
							<image src="" style="width: 40px; height: 40px; position: absolute; right: 5px;"></image>
							<text style="color: #FFFFFF; margin-top: 5px; font-size: 14px; text-align: center; font-weight: bold; margin-top: 40px;">分享</text>
						</view>
					</view>
					<!-- 最底下的文字部分 -->
					<view class="content">
						<text class="userName" :style="'width: '+ (windowWidth - 90) +'px;'">{{list.title}}</text><!-- i={{i}} -->
						<text class="words" :style="'width: '+ (windowWidth - 90) +'px;'">{{list.msg}}</text><!-- k={{k}} -->
						<text class="words" @click.stop="detail(list.id,list.mid)" :style="'width: '+ (windowWidth - 90) +'px;'">{{list.namets}}</text><!-- k={{k}} -->
					</view>
				</view>
				<view v-if="Math.abs(k-index)<=1&&!isChange">
					<view>
						<!-- 
						1.v-if：用于控制视频在节点的渲染数
						2.muted的默认值是 false，代表默认是禁音视频的
						3.http-cache默认开启视频缓存
						4.poster（封面（方案一））：这里的封面默认处理存储在阿里云的视频
						5.show-loading：这里默认去掉播放转圈的标志
						 -->
						<video
						v-if="isShow"
						:id="list._id+''+index"
						:loop="true"
						:muted="list.isplay"
						:controls="true"
						:http-cache="true"
						:page-gesture="false"
						:show-fullscreen-btn="false"
						:show-loading="false"
						:show-center-play-btn="false"
						:enable-progress-gesture="false"
						:src="list.src"
						@ended="ended"
						@click="tapVideoHover(list.state,$event)"
						:style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; background-color: #000000;'"
						
						></video>
						<!-- 
						1.这里是封面（方案二）：这里的封面可以自定义。
						2.也在代码中做了批注，两种方案可以共存，不会相互影响。
						-->
						<!-- <image
						v-if="!list.playIng"
						:src="list.img"
						:style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; position: absolute;'"
						mode="aspectFit"
						></image> -->
					</view>
					<!-- 播放状态：pause 的时候就会暂停 -->
					<view class="videoHover" @click="tapVideoHover(list.state,$event)" :style="'width: '+ windowWidth +'px; height: '+ cccHeight +'px;'">
						<image v-if="list.state=='pause'" class="playState" src="@/static/play.png"></image>
					</view>
					<view class="userInfo">
						<!-- 1.头像 -->
						<!-- <image @click="tozuozhe" class="userAvatar" :src="list.href" mode="aspectFill"></image> -->
						<!-- 2.点赞 -->
						<view @click="cLike(list.like,list.id,list.mid);" style="opacity: 0.9; margin-top: 17px;">
							<image v-if="list.like*1==1" src="@/static/aixin.png" style="width: 40px; height: 40px; position: absolute; right: 6px;"></image>
							<image v-if="list.like*1==2" src="@/static/aixinRed.png" style="width: 40px; height: 40px; position: absolute; right: 6px;"></image>
							<text style="color: #FFFFFF; margin-top: 5px; font-size: 14px; text-align: center; margin-top: 40px; font-weight: bold;" :class="{'likeNumActive':list.like}">{{list.like_n}}</text>
						</view>
						<!-- 3.分享 -->
						<view @click="share" style="opacity: 0.9; margin-top: 17px;">
							<image src="@/static/share-fill.png" style="width: 40px; height: 40px; position: absolute; right: 5px;"></image>
							<text style="color: #FFFFFF; margin-top: 5px; font-size: 14px; text-align: center; font-weight: bold; margin-top: 40px;">分享</text>
						</view>
						<!-- 4.评论 -->
						<view class="comment" @click="toComment(list.like,list.id,list.mid)" style="opacity: 0.9; margin-top: 17px;">
							<image v-if="list.iszj*1==1" src="@/static/sc.png" style="width: 40px; height: 40px; position: absolute; right: 6px;"></image>
							<image v-if="list.iszj*1==2" src="@/static/scRed.png" style="width: 40px; height: 40px; position: absolute; right: 6px;"></image>
							<text v-if="list.iszj*1==1"  style="color: #FFFFFF; margin-top: 5px; font-size: 14px; font-weight: bold; text-align: center; margin-top: 40px;">追剧</text>
							<text v-if="list.iszj*1==2" style="color: #FFFFFF; margin-top: 5px; font-size: 14px; font-weight: bold; text-align: center; margin-top: 40px;">已追</text>
						</view>
						
					</view>
					<!-- 最底下的文字部分 -->
					<view class="content">
						<text class="userName" :style="'width: '+ (windowWidth - 90) +'px;'">{{list.title}}</text><!-- i={{i}} -->
						<text class="wordss" :style="'width: '+ (windowWidth - 90) +'px;'">{{list.msg}}</text><!-- k={{k}} -->
						<text class="words" @click.stop="detail(list.id,list.mid)" :style="'width: '+ (windowWidth - 90) +'px;'">{{list.namets}}</text><!-- k={{k}} -->
					</view>
				</view>
			</swiper-item>
		</swiper>
		<uni-popup ref="sharepopup" type="bottom">
		    <share-btn :sharedataTemp="sharedata"></share-btn>
		</uni-popup>
	</view>
</template>

<script>
	import configs from "@/common/config.js"
	// import userList from '../new_index/data.js'//这个是假数据
	let audo = uni.createInnerAudioContext()
	import shareBtn from '@/components/share-btn/share-btn.vue';
	audo.loop = true
	export default {
		components: {
			shareBtn
		},
		data() {
			return {
				sharedata: {
					type: 2,
					strShareUrl: "",
					strShareTitle: "分享标题",
					strShareSummary: "分享总结",
					strShareImageUrl: ""
				},
				
				page: 1,
				windowWidth: 0,
				windowHeight: 0,
				cccHeight:0,
				platform: "",
				deleteHeight: 0,
				dataList: [],
				k: 0,
				oldVideo: "",
				voice: "",
				timeout: "",
				current: 0,
				total: 0,
				boxStyle:{//视频，图片封面样式🌟💗
					'height': 0,
					'width': 0,
				},
				urls:configs.webUrl,
				isAutoplay: true,//是否开启自动播放(默认不开启)
				autoplayText: "开启自动播放",
				thisindex: 0,
				isChange: true,
				
				isShow: false,
				
				changeTimeout: "",
				mptime: 0,
				mpstartTime: 0,
				datareload: false,
				isClick: false,
			}
		},
		watch:{
			async k(k,old_k){
				console.log(k)
				this.isShow = false;
				this.dataList[old_k].playIng = false//如果视频暂停，就加载封面
				this.dataList[old_k].isplay = true
				this.dataList[old_k].state = 'pause'
				console.log('预留第' + (old_k + 1) + '个视频：' + this.dataList[old_k]._id+''+old_k)
				uni.createVideoContext(this.dataList[old_k]._id + '' + old_k,this).stop()//如果视频暂停，那么旧视频停止，这里的this.dataList[old_k]._id + '' + old_k，后面加 old_k 是为了每一个视频的 id 值不同，这样就可以大程度的避免串音问题
				console.log('已经暂停 --> 第' + (old_k + 1) + '个视频～')//提示
				this.dataList[k].state = 'play'
				this.isShow = true;
				// #ifdef MP
				// 如果是小程序端
				clearTimeout(this.changeTimeout);
				
				this.dataList[k].isplay = false
				setTimeout(()=>{
					this.dataList[k].playIng = true
				},100)
				if(this.mptime < 0.2){
					this.changeTimeout = setTimeout(()=>{
						uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
					},250)
				} else {
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
				}
				// #endif
				// #ifdef H5
				this.dataList[k].isplay = true
				audo.src = this.dataList[k].src
				if(this.isClick){
					setTimeout(()=>{
						if (typeof WeixinJSBridge == "undefined") {
							setTimeout(()=>{
								audo.play()
								uni.createVideoContext(this.dataList[k]._id+''+k,this).seek(0)
								uni.createVideoContext(this.dataList[k]._id+''+k,this).play()
								setTimeout(()=>{
									this.dataList[k].playIng = true
								},650)
							},500)
						} else {
							WeixinJSBridge.invoke('getNetworkType', {}, e => {
								setTimeout(()=>{
									audo.play()
									uni.createVideoContext(this.dataList[k]._id+''+k,this).seek(0)
									uni.createVideoContext(this.dataList[k]._id+''+k,this).play()
									setTimeout(()=>{
										this.dataList[k].playIng = true
									},850)
								},200)
							})
						}
					},200)
				} else {
					audo.pause()
					this.dataList[k].state = 'pause'
					uni.createVideoContext(this.dataList[k]._id+''+k,this).seek(0)
					uni.createVideoContext(this.dataList[k]._id+''+k,this).pause()
				}
				// #endif
				var p = k+1;
				//console.log('预加载第' + (p + 1) + '个视频：' + this.dataList[p]._id+''+p)
			}
		},
		onLoad() {
			// #ifdef MP-WEIXIN || APP-PLUS
			this.sharedata.strShareUrl='/pages/client/video'
			// #endif
			// #ifdef H5
			this.sharedata.strShareUrl=this.urls+'/h5/#/pages/client/video'
			// #endif
			
			var option={'page':1,'index':0,'option':0}
			this.platform = uni.getSystemInfoSync().platform
			var model = uni.getSystemInfoSync().model
			if(this.platform == 'ios' && (model !== 'iPhone6' || model !== 'iPhone6s' || model !== 'iPhone7' || model !== 'iPhone8')){
				this.deleteHeight = 50//有 tabbar的 修改这里可以改变视频高度
			}
			this.windowWidth = uni.getSystemInfoSync().windowWidth
			this.windowHeight = uni.getSystemInfoSync().windowHeight
			this.cccHeight = this.windowHeight-80
			this.boxStyle.width = this.windowWidth + 'px'//给宽度加px
			this.boxStyle.height = this.windowHeight - this.deleteHeight;//有 tabbar的 修改这里可以改变视频高度
			this.thisindex = Number(option.index)
			this.get(option) //刚进入页面加载数据
		},
		onShow(){
			console.log('回到前台');
			if(this.dataList.length !== 0){
				// #ifdef MP
				this.dataList[this.k].state = 'play';
				uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
				// #endif
				// #ifdef H5
				if(this.isClick){
					this.dataList[this.k].state = 'play';
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
					audo.play()
				}
				// #endif
			}
		},
		onHide(){
			// #ifdef MP
			this.dataList[this.k].state = 'pause';
			uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).pause()
			// #endif
			// #ifdef H5
			if(this.isClick){
				this.dataList[this.k].state = 'pause';
				uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).pause()
				audo.pause()
			}
			// #endif
			console.log('到后台');
		},
		methods: {
			share(){
				this.$refs.sharepopup.open();
			},
			detail(vid,mid){
				uni.navigateTo({
					url:'/pages/client/tuan/detail?vid='+vid+'&mid='+mid
				})
			},
			mpTouchend(){
				this.mptime = (new Date()/1000) - this.mpstartTime;
			},
			mpTouchstart(){
				this.mpstartTime = (new Date()/1000);
			},
			autoPlay(){
				this.isAutoplay = !this.isAutoplay;
				if(!this.isAutoplay){
					this.autoplayText = "开启自动播放"
					uni.showToast({
						title: "关闭自动播放",
						icon: 'none',
						duration: 3000
					})
				} else {
					this.autoplayText = "关闭自动播放"
					uni.showToast({
						title: "开启自动播放",
						icon: 'none',
						duration: 3000
					})
				}
			},
			ended(){
				console.log(111111111)
				// 1.播放当前视频结束时触发，自动切换下一个视频
				var idsdff=this.k+1
				if(this.isAutoplay && this.total>idsdff){
					this.current = idsdff
				}
			},
			//点击播放&&暂停
			tapVideoHover(state,event){
				console.log('state--',state);
				if(state=='play'||state=='continue'){
					this.dataList[this.k].state = 'pause';
				}else{
					this.dataList[this.k].state = 'continue';
				}
				if(this.dataList[this.k].state == 'continue'){
					this.isClick = true;
					this.dataList[this.k].playIng = true
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play();//暂停以后继续播放
					// #ifdef MP
					this.dataList[this.k].isplay = false
					// #endif
					// #ifdef H5
					audo.play()
					// #endif
				}
				if(this.dataList[this.k].state == 'pause'){
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).pause();//暂停以后继续播放
					// #ifdef MP
					this.dataList[this.k].isplay = true
					// #endif
					// #ifdef H5
					audo.pause()
					// #endif
				}
			},
			change(event){
				this.k = event.detail.current
			},
			animationfinish(event){
				// 1.这里进行判断，如果是最后一个视频就进入 get() 方法加载视频进入列表
				if(this.k == this.dataList.length - 1){
					this.GET()
				}
			},
			//每一组结束时新的请求
			GET(){
				var uid=0;
				if(uni.getStorageSync("userinfo")){
					uid=uni.getStorageSync("userinfo").id
				}
				uni.request({
					url: this.urls+'/api/video/videoRecommend?page='+this.page+'&uid='+uid,
					success: (res) => {
						this.page=this.page+1
						var msg = res.data.data
						// 2.这里把视频添加到视频列表
						for (let i = 0; i < msg.length; i++) {
							this.dataList.push(msg[i])
						}
					}
				})
			},
			get(options){
				var uid=0;
				if(uni.getStorageSync("userinfo")){
					uid=uni.getStorageSync("userinfo").id
				}
				uni.request({
					url: this.urls+'/api/video/videoRecommend?page='+this.page+'&uid='+uid,
					//url: 'https://bdb24c6d-8c19-4f80-8e7e-c9c9f037f131.bspapp.com/video',
					success: (res) => {
						this.page=this.page+1
						this.dataList = res.data.data
						this.total= res.data.total
						this.gets(options,this.dataList)
						// // 2.这里把视频添加到视频列表
						// for (let i = 0; i < msg.length; i++) {
						// 	this.dataList.push(msg[i])
						// }
					}
				})
				
			},
			async gets(options,dataList){
				// 1.这里引入后端请求数据
				// var msg = userList
				this.isShow = false;
				// this.dataList = uni.getStorageSync("dataList");
				console.log(options.option)
				this.current = Number(options.option);
				this.k = Number(options.option);
				await setTimeout(()=>{
					this.isChange = false
				},50)
				this.isShow = true;
				// #ifdef H5
				this.dataList[this.k].isplay = true
				// #endif
				// #ifdef MP
				// 如果是小程序端
				
				// console.log(33333333333333333333333)
				// console.log(this.k)
				// console.log(this.dataList[this.k].isplay)
				this.dataList[this.k].isplay = false
				this.dataList[this.k].state = 'play'
				// #endif
				this.dataList[this.k].playIng = true
				if(Number(options.option) == 0){
					setTimeout(()=>{
						// #ifdef H5
						uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).seek(0)
						uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).pause()
						this.dataList[this.k].state = 'pause';
						audo.src = this.dataList[this.k].src;
						// #endif
						// #ifdef MP
						uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
						// #endif
					},100)
				}
			},
			toComment(sss,vid,mid){
				if(uni.getStorageSync("userinfo")){
					
				}else{
					this.denglu()
					return false
				}
				const video = this.dataList[this.k];
				if(sss==1){
					this.dataList[this.k].iszj=2
				}else{
					this.dataList[this.k].iszj=1
				}
				
				let this_=this
				let data = {'vid':vid,'mid':mid};
				data.token = uni.getStorageSync("userinfo").token
				data.uid = uni.getStorageSync("userinfo").id
				uni.request({
					url: this_.urls+'/api/user/videorecord',
					data: data,
					success: data => {
						uni.showToast({
							icon:'none',
							title:data.data.msg
						})
					},
					fail: (data, code) => {
					}
				});
			},
			cLike(sss,vid,mid){
				if(uni.getStorageSync("userinfo")){
					
				}else{
					this.denglu()
					return false
				}
				const video = this.dataList[this.k];
				if(sss==1){
					this.dataList[this.k].like=2
					video.like_n += 1;
				}else{
					this.dataList[this.k].like=1
					video.like_n -= 1
				}
				
				console.log(vid)
				
				let this_=this
				let data = {'vid':vid,'mid':mid};
				data.token = uni.getStorageSync("userinfo").token
				data.uid = uni.getStorageSync("userinfo").id
				uni.request({
					url: this_.urls+'/api/user/tapLove',
					data: data,
					success: data => {
						uni.showToast({
							icon:'none',
							title:data.data.msg
						})
						// if(data.data.msg=='取消成功'){
						// 	video.like_n -= 1
						// }else{
						// 	video.like_n += 1;
						// }
					},
					fail: (data, code) => {
					}
				});
			},
			denglu(){
				uni.showModal({
					title: '温馨提示',
					content: '请先登录',
					showCancel: true,
					confirmText: "登录",
					success: function (res) {
						if (res.confirm) {
							uni.navigateTo({
								url:"/pages/login/login"
							})
						} else if (res.cancel) {
							//uni.navigateBack();
						}
					}
				});
				
			}
		}
	}
</script>

<style>
	.container {background-color: #000000;}
	.item {
		/* width : 750rpx; */
		background-color: #000000;
		position: relative;
	}
	.videoHover{
		position: absolute;
		top: 40px;
		left: 0;
		flex: 1;
		background-color: rgba(0,0,0,0.1);
		justify-content: center;
		align-items: center;
		
		/* border-style: dashed;
		border-color: #DD524D;
		border-width: 1px; */
	}
	.playState{
		width:  160rpx;
		height: 160rpx;
		opacity: 0.2;
	}
	.userInfo{
		position: absolute;
		bottom:30%;
		right: 10px;
		width: 100rpx;
		text-align: center;
		flex-direction: column;
		
	}
	.userAvatar{
		border-radius: 500%;
		margin-bottom: 15px;
		border-style: solid;
		border-width: 2px;
		border-color: #ffffff;
	}
	.userAvatar{
		width : 100rpx;
		height: 100rpx;
	}
	.likeIco,.shareIco,.commentIco{
		width : 60rpx;
		height: 60rpx;
		margin-top: 15px;
	}
	.likeNum,.commentNum,.shareTex{
		color: #ffffff;
		font-size: 30rpx;
		text-align: center;
		margin: 5px;
	}
	.likeNumActive{
		color: red;
	}
	.content{
	  width: 720rpx;
	  z-index: 99;
	  position: absolute;
	  bottom: 30px;
	  /* justify-content: center; */
	  padding: 15rpx;
	  flex-direction: column;
	  justify-content: flex-start;
	  color: #ffffff;
	}
	.userName {
	  font-size: 30rpx;
	  color: #ffffff;
	  margin-top: 80upx;
	  margin-left: -12rpx;
	}
	.words {
	  margin-top: 16rpx;
	  font-size: 30rpx;
	  color: #ffffff;
	  margin-bottom: 20rpx;
	}
	.wordss {
	  margin-top: 10rpx;
	  font-size: 26rpx;
	  color: #ffffff;
	}
	.root{
		background-color: #000000;
	}
</style>
